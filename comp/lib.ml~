
let caf =
  let ar = Id.genid "ar" and num = Id.genid "num" and init = Id.genid "init" in
    { name = (Id.L "min_caml_create_float_array",
	      Type.Fun ([Type.Int; Type.Float], (Type.Array Type.Float)));
      args = [num, Type.Int; init, Type.Float];
      formal_fv = [];
      body =
	(Let((ar, Type.Array(Type.Float)), Add(zreg, hpreg),
	     Let((hpreg, Type.Int), Add(hpreg, num),
		 Let((Id.gentmp Type.Unit, Type.Unit),
		     CallDir(Id.L "min_caml_init_float_array", [ar; num], [init]),
		     (*TODO:ここで指定するとアセンブラではロードの直後となって無駄*)
		     (*これはemitで簡単に解消できそう*)
		     Add(zreg, ar)))));
    }
      (*      
	      let cafi =
	      let ar = Id.genid "ar" and num = Id.genid "num" and init = Id.genid "init" in
	      let nnum = Id.genid "num" and nar = Id.genid "ar" in
	      { name = Id.L "min_caml_init_array"; args = [ar; num; init]; fargs = [];
	      body =
	      Ans(IfEq(num, zreg, Ans(Nop),
	      Let((Id.gentmp Type.Unit, Type.Unit), Store(init, ar, 0),
	      Let((nnum, Type.Int), Subi(num, 1),
	      Let((nar, Type.Array(Type.Int)), Addi(ar, 1),
	      Ans(CallDir(Id.L "min_caml_init_array", [nar; nnum; init], []
	      )))))));
	      ret = Type.Unit }
	      
	      let cai =
	      let ar = Id.genid "ar" and num = Id.genid "num" and init = Id.genid "init" in
	      let nnum = Id.genid "num" and nar = Id.genid "ar" in
	      { name = Id.L "min_caml_init_float_array"; args = [ar; num]; fargs = [init];
	      body =
	      Ans(IfEq(num, zreg, Ans(Nop),
	      Let((Id.gentmp Type.Unit, Type.Unit), Fstore(init, ar, 0),
	      Let((nnum, Type.Int), Subi(num, 1),
	      Let((nar, Type.Array(Type.Int)), Addi(ar, 1),
	      Ans(CallDir(Id.L "min_caml_init_float_array", [nar; nnum], [init]
	      )))))));
	      ret = Type.Unit }
	      
	      let ca =
	      let ar = Id.genid "ar" and num = Id.genid "num" and init = Id.genid "init" in
	      { name = Id.L "min_caml_create_array"; args = [num; init]; fargs = [];
	      body =
	      (Let((ar, Type.Array(Type.Int)), Add(zreg, hpreg),
	      Let((hpreg, Type.Int), Add(hpreg, num),
	      Let((Id.gentmp Type.Unit, Type.Unit),
	      CallDir(Id.L "min_caml_init_array", [ar; num; init], []),
	      Ans(Add(zreg, ar))))));
	      ret = Type.Array(Type.Int) }

	      let ri =
	      { name = Id.L "min_caml_read_int"; args = []; fargs = [];
	      body = Ans(Ri);
	      ret = Type.Int }

	      let rf =
	      { name = Id.L "min_caml_read_float"; args = []; fargs = [];
	      body = Ans(Rf);
	      ret = Type.Float }

	      let pi =
	      let num = Id.genid "num" in
	      { name = Id.L "min_caml_print_char"; args = [num]; fargs = [];
	      body = Ans(Pc num);
	      ret = Type.Unit }

	      let pf =
	      let num = Id.genid "num" in
	      { name = Id.L "min_caml_print_float"; args = []; fargs = [num];
	      body = Ans(Pf num);
	      ret = Type.Unit }
      *)
