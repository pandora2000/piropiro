type token =
  | BOOL of (bool)
  | INT of (int)
  | FLOAT of (float)
  | NOT
  | MINUS
  | PLUS
  | MINUS_DOT
  | PLUS_DOT
  | AST
  | AST_DOT
  | SLASH_DOT
  | EQUAL
  | LESS_GREATER
  | LESS_EQUAL
  | GREATER_EQUAL
  | LESS
  | GREATER
  | IF
  | THEN
  | ELSE
  | IDENT of (Id.t)
  | LET
  | IN
  | REC
  | COMMA
  | ARRAY_CREATE
  | DOT
  | LESS_MINUS
  | SEMICOLON
  | LPAREN
  | RPAREN
  | EOF
  | SLASH

open Parsing;;
# 2 "parser.mly"
  (* parserが利用する変数、関数、型などの定義 *)
  open Syntax
  open Lexing
    
  let addtyp x = (x, Type.gentyp ())

# 45 "parser.ml"
let yytransl_const = [|
  260 (* NOT *);
  261 (* MINUS *);
  262 (* PLUS *);
  263 (* MINUS_DOT *);
  264 (* PLUS_DOT *);
  265 (* AST *);
  266 (* AST_DOT *);
  267 (* SLASH_DOT *);
  268 (* EQUAL *);
  269 (* LESS_GREATER *);
  270 (* LESS_EQUAL *);
  271 (* GREATER_EQUAL *);
  272 (* LESS *);
  273 (* GREATER *);
  274 (* IF *);
  275 (* THEN *);
  276 (* ELSE *);
  278 (* LET *);
  279 (* IN *);
  280 (* REC *);
  281 (* COMMA *);
  282 (* ARRAY_CREATE *);
  283 (* DOT *);
  284 (* LESS_MINUS *);
  285 (* SEMICOLON *);
  286 (* LPAREN *);
  287 (* RPAREN *);
    0 (* EOF *);
  288 (* SLASH *);
    0|]

let yytransl_block = [|
  257 (* BOOL *);
  258 (* INT *);
  259 (* FLOAT *);
  277 (* IDENT *);
    0|]

let yylhs = "\255\255\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\003\000\007\000\007\000\004\000\
\004\000\005\000\005\000\006\000\006\000\000\000"

let yylen = "\002\000\
\003\000\002\000\001\000\001\000\001\000\001\000\005\000\001\000\
\002\000\002\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\006\000\002\000\003\000\003\000\003\000\003\000\
\003\000\003\000\006\000\005\000\002\000\001\000\008\000\007\000\
\002\000\003\000\003\000\001\000\004\000\002\000\001\000\002\000\
\001\000\003\000\003\000\003\000\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\036\000\003\000\004\000\005\000\000\000\000\000\
\000\000\000\000\006\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\038\000\
\000\000\000\000\045\000\044\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\007\000\000\000\000\000\000\000\000\000"

let yydgoto = "\002\000\
\015\000\016\000\051\000\045\000\017\000\053\000\079\000"

let yysindex = "\004\000\
\054\004\000\000\000\000\000\000\000\000\000\000\054\004\054\004\
\054\004\054\004\000\000\243\254\049\255\010\004\180\003\236\254\
\240\254\049\255\049\255\049\255\161\255\254\254\247\254\253\254\
\001\255\000\000\193\255\054\004\054\004\054\004\054\004\054\004\
\054\004\054\004\054\004\054\004\054\004\054\004\054\004\054\004\
\054\004\054\004\054\004\248\254\049\255\249\254\054\004\054\004\
\054\004\000\255\002\255\255\254\231\254\252\254\248\254\000\000\
\057\255\057\255\057\255\057\255\049\255\049\255\049\255\041\004\
\041\004\041\004\041\004\041\004\041\004\244\003\180\003\049\255\
\248\254\054\004\244\003\052\003\225\255\000\255\015\255\054\004\
\008\255\009\255\020\255\054\004\084\003\054\004\054\004\000\000\
\054\004\180\003\000\000\000\000\054\004\116\003\028\255\212\003\
\180\003\180\003\148\003\000\000\054\004\054\004\212\003\180\003"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\057\000\033\000\
\161\000\189\000\217\000\245\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\179\001\000\000\065\000\019\001\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\097\000\000\000\
\207\001\235\001\007\002\037\002\051\001\083\001\115\001\069\002\
\101\002\133\002\165\002\186\002\206\002\225\002\011\003\147\001\
\129\000\000\000\239\002\000\000\000\000\050\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\016\003\000\000\000\000\000\000\000\000\001\000\246\002\
\018\003\038\255\000\000\000\000\000\000\000\000\253\002\025\003"

let yygindex = "\000\000\
\006\000\056\000\000\000\000\000\000\000\000\000\241\255"

let yytablesize = 1364
let yytable = "\082\000\
\007\000\004\000\005\000\006\000\001\000\083\000\046\000\022\000\
\047\000\049\000\023\000\050\000\018\000\019\000\020\000\021\000\
\024\000\052\000\054\000\027\000\078\000\011\000\074\000\081\000\
\080\000\084\000\089\000\054\000\091\000\092\000\014\000\093\000\
\008\000\057\000\058\000\059\000\060\000\061\000\062\000\063\000\
\064\000\065\000\066\000\067\000\068\000\069\000\070\000\071\000\
\072\000\004\000\005\000\006\000\075\000\076\000\077\000\101\000\
\046\000\004\000\005\000\006\000\037\000\039\000\088\000\000\000\
\041\000\032\000\033\000\034\000\025\000\011\000\044\000\000\000\
\000\000\044\000\044\000\044\000\044\000\011\000\014\000\085\000\
\055\000\000\000\044\000\000\000\000\000\090\000\014\000\000\000\
\043\000\094\000\000\000\096\000\097\000\000\000\098\000\000\000\
\035\000\000\000\099\000\000\000\073\000\000\000\000\000\000\000\
\000\000\000\000\103\000\104\000\000\000\000\000\000\000\000\000\
\044\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
\044\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
\040\000\000\000\044\000\044\000\044\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\044\000\000\000\000\000\000\000\
\000\000\044\000\000\000\000\000\000\000\044\000\000\000\044\000\
\044\000\044\000\044\000\000\000\000\000\000\000\044\000\044\000\
\030\000\004\000\005\000\006\000\000\000\028\000\029\000\030\000\
\031\000\032\000\033\000\034\000\035\000\036\000\037\000\038\000\
\039\000\040\000\000\000\048\000\000\000\011\000\000\000\000\000\
\000\000\041\000\000\000\000\000\009\000\042\000\014\000\000\000\
\043\000\004\000\005\000\006\000\000\000\028\000\029\000\030\000\
\031\000\032\000\033\000\034\000\035\000\036\000\037\000\038\000\
\039\000\040\000\000\000\000\000\000\000\011\000\000\000\000\000\
\010\000\041\000\000\000\000\000\000\000\042\000\014\000\056\000\
\043\000\004\000\005\000\006\000\000\000\028\000\029\000\030\000\
\031\000\032\000\033\000\034\000\035\000\036\000\037\000\038\000\
\039\000\040\000\000\000\000\000\020\000\011\000\000\000\087\000\
\000\000\041\000\000\000\000\000\000\000\042\000\014\000\000\000\
\043\000\007\000\007\000\007\000\000\000\007\000\007\000\007\000\
\007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
\007\000\007\000\029\000\007\000\007\000\007\000\000\000\007\000\
\000\000\007\000\000\000\007\000\000\000\007\000\007\000\007\000\
\007\000\008\000\008\000\008\000\000\000\008\000\008\000\008\000\
\008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
\008\000\008\000\023\000\008\000\008\000\008\000\000\000\008\000\
\000\000\008\000\000\000\000\000\000\000\008\000\008\000\008\000\
\008\000\041\000\041\000\041\000\000\000\041\000\041\000\041\000\
\041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
\041\000\041\000\025\000\041\000\041\000\041\000\000\000\041\000\
\000\000\041\000\000\000\000\000\000\000\041\000\041\000\041\000\
\041\000\035\000\035\000\035\000\000\000\035\000\035\000\035\000\
\035\000\035\000\035\000\035\000\035\000\035\000\035\000\035\000\
\035\000\035\000\026\000\035\000\035\000\035\000\000\000\035\000\
\000\000\035\000\000\000\000\000\000\000\035\000\035\000\035\000\
\035\000\040\000\040\000\040\000\000\000\040\000\040\000\040\000\
\040\000\040\000\040\000\040\000\040\000\040\000\040\000\040\000\
\040\000\040\000\024\000\040\000\040\000\040\000\000\000\040\000\
\000\000\040\000\000\000\000\000\000\000\040\000\040\000\040\000\
\040\000\030\000\030\000\030\000\000\000\030\000\030\000\030\000\
\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
\030\000\030\000\033\000\030\000\030\000\030\000\000\000\030\000\
\000\000\000\000\000\000\000\000\000\000\030\000\030\000\030\000\
\030\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
\009\000\009\000\009\000\009\000\009\000\009\000\012\000\009\000\
\009\000\000\000\000\000\009\000\000\000\009\000\000\000\000\000\
\000\000\009\000\000\000\009\000\009\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\011\000\010\000\010\000\000\000\000\000\010\000\
\000\000\010\000\000\000\000\000\000\000\010\000\000\000\010\000\
\010\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
\020\000\020\000\020\000\020\000\020\000\020\000\022\000\020\000\
\020\000\000\000\000\000\020\000\000\000\020\000\000\000\000\000\
\000\000\020\000\000\000\020\000\020\000\000\000\000\000\029\000\
\029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
\029\000\029\000\029\000\029\000\021\000\029\000\029\000\000\000\
\000\000\029\000\000\000\029\000\000\000\000\000\000\000\029\000\
\000\000\029\000\029\000\000\000\000\000\000\000\000\000\023\000\
\023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
\023\000\023\000\023\000\023\000\013\000\023\000\023\000\000\000\
\000\000\023\000\000\000\023\000\000\000\000\000\000\000\023\000\
\000\000\023\000\023\000\000\000\000\000\000\000\000\000\025\000\
\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
\025\000\025\000\025\000\025\000\014\000\025\000\025\000\000\000\
\000\000\025\000\000\000\025\000\000\000\000\000\000\000\025\000\
\000\000\025\000\025\000\000\000\000\000\000\000\000\000\026\000\
\026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
\026\000\026\000\026\000\026\000\017\000\026\000\026\000\000\000\
\000\000\026\000\000\000\026\000\000\000\000\000\000\000\026\000\
\000\000\026\000\026\000\000\000\000\000\000\000\000\000\024\000\
\024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
\024\000\024\000\024\000\024\000\018\000\024\000\024\000\000\000\
\000\000\024\000\000\000\024\000\000\000\000\000\000\000\024\000\
\000\000\024\000\024\000\000\000\000\000\000\000\000\000\000\000\
\033\000\015\000\033\000\033\000\033\000\033\000\033\000\033\000\
\033\000\033\000\033\000\033\000\000\000\033\000\033\000\000\000\
\000\000\033\000\000\000\033\000\000\000\016\000\000\000\033\000\
\000\000\033\000\033\000\012\000\012\000\012\000\012\000\000\000\
\000\000\000\000\012\000\012\000\012\000\012\000\012\000\012\000\
\043\000\012\000\012\000\000\000\000\000\012\000\000\000\012\000\
\000\000\000\000\000\000\012\000\000\000\012\000\042\000\011\000\
\011\000\011\000\011\000\000\000\000\000\019\000\011\000\011\000\
\011\000\011\000\011\000\011\000\032\000\011\000\011\000\000\000\
\000\000\011\000\000\000\011\000\000\000\000\000\000\000\011\000\
\000\000\011\000\034\000\022\000\022\000\022\000\022\000\028\000\
\000\000\027\000\022\000\022\000\022\000\022\000\022\000\022\000\
\031\000\022\000\022\000\000\000\000\000\022\000\000\000\022\000\
\000\000\000\000\000\000\022\000\000\000\022\000\000\000\000\000\
\000\000\021\000\021\000\021\000\021\000\000\000\000\000\000\000\
\021\000\021\000\021\000\021\000\021\000\021\000\000\000\021\000\
\021\000\000\000\000\000\021\000\000\000\021\000\000\000\000\000\
\000\000\021\000\000\000\021\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\013\000\013\000\013\000\013\000\013\000\013\000\000\000\013\000\
\013\000\000\000\000\000\013\000\000\000\013\000\000\000\000\000\
\000\000\013\000\000\000\013\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\014\000\014\000\014\000\014\000\014\000\014\000\000\000\014\000\
\014\000\000\000\000\000\014\000\000\000\014\000\000\000\000\000\
\000\000\014\000\000\000\014\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\017\000\017\000\017\000\017\000\017\000\017\000\000\000\017\000\
\017\000\000\000\000\000\017\000\000\000\017\000\000\000\000\000\
\000\000\017\000\000\000\017\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\018\000\018\000\018\000\018\000\018\000\018\000\000\000\018\000\
\018\000\000\000\000\000\018\000\000\000\018\000\000\000\000\000\
\000\000\018\000\000\000\018\000\000\000\015\000\015\000\015\000\
\015\000\015\000\015\000\000\000\015\000\015\000\000\000\000\000\
\015\000\000\000\015\000\000\000\000\000\000\000\015\000\000\000\
\015\000\016\000\016\000\016\000\016\000\016\000\016\000\000\000\
\016\000\016\000\000\000\000\000\016\000\000\000\016\000\000\000\
\000\000\000\000\016\000\000\000\016\000\000\000\000\000\000\000\
\000\000\000\000\000\000\043\000\043\000\000\000\000\000\043\000\
\000\000\043\000\000\000\000\000\000\000\043\000\000\000\043\000\
\000\000\042\000\042\000\000\000\000\000\042\000\000\000\042\000\
\019\000\019\000\000\000\042\000\019\000\042\000\000\000\032\000\
\032\000\000\000\019\000\032\000\019\000\000\000\000\000\000\000\
\000\000\032\000\000\000\032\000\000\000\034\000\034\000\000\000\
\000\000\034\000\028\000\028\000\027\000\027\000\028\000\000\000\
\027\000\034\000\000\000\031\000\031\000\000\000\028\000\031\000\
\027\000\000\000\000\000\000\000\004\000\005\000\006\000\031\000\
\028\000\029\000\030\000\031\000\032\000\033\000\034\000\035\000\
\036\000\037\000\038\000\039\000\040\000\000\000\000\000\086\000\
\011\000\000\000\000\000\000\000\041\000\000\000\000\000\000\000\
\042\000\014\000\000\000\043\000\004\000\005\000\006\000\000\000\
\028\000\029\000\030\000\031\000\032\000\033\000\034\000\035\000\
\036\000\037\000\038\000\039\000\040\000\000\000\000\000\000\000\
\011\000\000\000\000\000\000\000\041\000\000\000\000\000\000\000\
\042\000\014\000\095\000\043\000\004\000\005\000\006\000\000\000\
\028\000\029\000\030\000\031\000\032\000\033\000\034\000\035\000\
\036\000\037\000\038\000\039\000\040\000\000\000\000\000\000\000\
\011\000\000\000\000\000\000\000\041\000\000\000\000\000\000\000\
\042\000\014\000\100\000\043\000\004\000\005\000\006\000\000\000\
\028\000\029\000\030\000\031\000\032\000\033\000\034\000\035\000\
\036\000\037\000\038\000\039\000\040\000\000\000\000\000\000\000\
\011\000\000\000\102\000\000\000\041\000\000\000\000\000\000\000\
\042\000\014\000\000\000\043\000\004\000\005\000\006\000\000\000\
\028\000\029\000\030\000\031\000\032\000\033\000\034\000\035\000\
\036\000\037\000\038\000\039\000\040\000\000\000\000\000\000\000\
\011\000\000\000\000\000\000\000\041\000\000\000\000\000\000\000\
\042\000\014\000\000\000\043\000\004\000\005\000\006\000\000\000\
\028\000\029\000\030\000\031\000\032\000\033\000\034\000\035\000\
\036\000\037\000\038\000\039\000\040\000\000\000\000\000\000\000\
\011\000\000\000\000\000\000\000\041\000\000\000\000\000\000\000\
\000\000\014\000\000\000\043\000\004\000\005\000\006\000\000\000\
\028\000\029\000\030\000\031\000\032\000\033\000\034\000\035\000\
\036\000\037\000\038\000\039\000\040\000\000\000\000\000\000\000\
\011\000\003\000\004\000\005\000\006\000\007\000\008\000\000\000\
\009\000\014\000\000\000\043\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\010\000\000\000\000\000\011\000\012\000\
\000\000\000\000\000\000\013\000\000\000\000\000\000\000\014\000\
\026\000\004\000\005\000\006\000\000\000\028\000\029\000\030\000\
\031\000\032\000\033\000\034\000\000\000\003\000\004\000\005\000\
\006\000\007\000\008\000\000\000\009\000\011\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\014\000\010\000\
\043\000\000\000\011\000\012\000\000\000\000\000\000\000\013\000\
\000\000\000\000\000\000\014\000"

let yycheck = "\025\001\
\000\000\001\001\002\001\003\001\001\000\031\001\027\001\021\001\
\025\001\012\001\024\001\021\001\007\000\008\000\009\000\010\000\
\030\001\021\001\027\001\014\000\021\001\021\001\030\001\025\001\
\023\001\030\001\012\001\027\001\021\001\021\001\030\001\012\001\
\000\000\028\000\029\000\030\000\031\000\032\000\033\000\034\000\
\035\000\036\000\037\000\038\000\039\000\040\000\041\000\042\000\
\043\000\001\001\002\001\003\001\047\000\048\000\049\000\028\001\
\000\000\001\001\002\001\003\001\023\001\012\001\078\000\255\255\
\000\000\009\001\010\001\011\001\013\000\021\001\015\000\255\255\
\255\255\018\000\019\000\020\000\021\000\021\001\030\001\074\000\
\025\000\255\255\027\000\255\255\255\255\080\000\030\001\255\255\
\032\001\084\000\255\255\086\000\087\000\255\255\089\000\255\255\
\000\000\255\255\093\000\255\255\045\000\255\255\255\255\255\255\
\255\255\255\255\101\000\102\000\255\255\255\255\255\255\255\255\
\057\000\058\000\059\000\060\000\061\000\062\000\063\000\064\000\
\065\000\066\000\067\000\068\000\069\000\070\000\071\000\072\000\
\000\000\255\255\075\000\076\000\077\000\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\085\000\255\255\255\255\255\255\
\255\255\090\000\255\255\255\255\255\255\094\000\255\255\096\000\
\097\000\098\000\099\000\255\255\255\255\255\255\103\000\104\000\
\000\000\001\001\002\001\003\001\255\255\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\255\255\019\001\255\255\021\001\255\255\255\255\
\255\255\025\001\255\255\255\255\000\000\029\001\030\001\255\255\
\032\001\001\001\002\001\003\001\255\255\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\255\255\255\255\255\255\021\001\255\255\255\255\
\000\000\025\001\255\255\255\255\255\255\029\001\030\001\031\001\
\032\001\001\001\002\001\003\001\255\255\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\255\255\255\255\000\000\021\001\255\255\023\001\
\255\255\025\001\255\255\255\255\255\255\029\001\030\001\255\255\
\032\001\001\001\002\001\003\001\255\255\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\000\000\019\001\020\001\021\001\255\255\023\001\
\255\255\025\001\255\255\027\001\255\255\029\001\030\001\031\001\
\032\001\001\001\002\001\003\001\255\255\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\000\000\019\001\020\001\021\001\255\255\023\001\
\255\255\025\001\255\255\255\255\255\255\029\001\030\001\031\001\
\032\001\001\001\002\001\003\001\255\255\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\000\000\019\001\020\001\021\001\255\255\023\001\
\255\255\025\001\255\255\255\255\255\255\029\001\030\001\031\001\
\032\001\001\001\002\001\003\001\255\255\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\000\000\019\001\020\001\021\001\255\255\023\001\
\255\255\025\001\255\255\255\255\255\255\029\001\030\001\031\001\
\032\001\001\001\002\001\003\001\255\255\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\000\000\019\001\020\001\021\001\255\255\023\001\
\255\255\025\001\255\255\255\255\255\255\029\001\030\001\031\001\
\032\001\001\001\002\001\003\001\255\255\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\000\000\019\001\020\001\021\001\255\255\023\001\
\255\255\255\255\255\255\255\255\255\255\029\001\030\001\031\001\
\032\001\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\000\000\019\001\
\020\001\255\255\255\255\023\001\255\255\025\001\255\255\255\255\
\255\255\029\001\255\255\031\001\032\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\000\000\019\001\020\001\255\255\255\255\023\001\
\255\255\025\001\255\255\255\255\255\255\029\001\255\255\031\001\
\032\001\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\000\000\019\001\
\020\001\255\255\255\255\023\001\255\255\025\001\255\255\255\255\
\255\255\029\001\255\255\031\001\032\001\255\255\255\255\005\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\000\000\019\001\020\001\255\255\
\255\255\023\001\255\255\025\001\255\255\255\255\255\255\029\001\
\255\255\031\001\032\001\255\255\255\255\255\255\255\255\005\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\000\000\019\001\020\001\255\255\
\255\255\023\001\255\255\025\001\255\255\255\255\255\255\029\001\
\255\255\031\001\032\001\255\255\255\255\255\255\255\255\005\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\000\000\019\001\020\001\255\255\
\255\255\023\001\255\255\025\001\255\255\255\255\255\255\029\001\
\255\255\031\001\032\001\255\255\255\255\255\255\255\255\005\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\000\000\019\001\020\001\255\255\
\255\255\023\001\255\255\025\001\255\255\255\255\255\255\029\001\
\255\255\031\001\032\001\255\255\255\255\255\255\255\255\005\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\000\000\019\001\020\001\255\255\
\255\255\023\001\255\255\025\001\255\255\255\255\255\255\029\001\
\255\255\031\001\032\001\255\255\255\255\255\255\255\255\255\255\
\006\001\000\000\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\255\255\019\001\020\001\255\255\
\255\255\023\001\255\255\025\001\255\255\000\000\255\255\029\001\
\255\255\031\001\032\001\005\001\006\001\007\001\008\001\255\255\
\255\255\255\255\012\001\013\001\014\001\015\001\016\001\017\001\
\000\000\019\001\020\001\255\255\255\255\023\001\255\255\025\001\
\255\255\255\255\255\255\029\001\255\255\031\001\000\000\005\001\
\006\001\007\001\008\001\255\255\255\255\000\000\012\001\013\001\
\014\001\015\001\016\001\017\001\000\000\019\001\020\001\255\255\
\255\255\023\001\255\255\025\001\255\255\255\255\255\255\029\001\
\255\255\031\001\000\000\005\001\006\001\007\001\008\001\000\000\
\255\255\000\000\012\001\013\001\014\001\015\001\016\001\017\001\
\000\000\019\001\020\001\255\255\255\255\023\001\255\255\025\001\
\255\255\255\255\255\255\029\001\255\255\031\001\255\255\255\255\
\255\255\005\001\006\001\007\001\008\001\255\255\255\255\255\255\
\012\001\013\001\014\001\015\001\016\001\017\001\255\255\019\001\
\020\001\255\255\255\255\023\001\255\255\025\001\255\255\255\255\
\255\255\029\001\255\255\031\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\012\001\013\001\014\001\015\001\016\001\017\001\255\255\019\001\
\020\001\255\255\255\255\023\001\255\255\025\001\255\255\255\255\
\255\255\029\001\255\255\031\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\012\001\013\001\014\001\015\001\016\001\017\001\255\255\019\001\
\020\001\255\255\255\255\023\001\255\255\025\001\255\255\255\255\
\255\255\029\001\255\255\031\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\012\001\013\001\014\001\015\001\016\001\017\001\255\255\019\001\
\020\001\255\255\255\255\023\001\255\255\025\001\255\255\255\255\
\255\255\029\001\255\255\031\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\012\001\013\001\014\001\015\001\016\001\017\001\255\255\019\001\
\020\001\255\255\255\255\023\001\255\255\025\001\255\255\255\255\
\255\255\029\001\255\255\031\001\255\255\012\001\013\001\014\001\
\015\001\016\001\017\001\255\255\019\001\020\001\255\255\255\255\
\023\001\255\255\025\001\255\255\255\255\255\255\029\001\255\255\
\031\001\012\001\013\001\014\001\015\001\016\001\017\001\255\255\
\019\001\020\001\255\255\255\255\023\001\255\255\025\001\255\255\
\255\255\255\255\029\001\255\255\031\001\255\255\255\255\255\255\
\255\255\255\255\255\255\019\001\020\001\255\255\255\255\023\001\
\255\255\025\001\255\255\255\255\255\255\029\001\255\255\031\001\
\255\255\019\001\020\001\255\255\255\255\023\001\255\255\025\001\
\019\001\020\001\255\255\029\001\023\001\031\001\255\255\019\001\
\020\001\255\255\029\001\023\001\031\001\255\255\255\255\255\255\
\255\255\029\001\255\255\031\001\255\255\019\001\020\001\255\255\
\255\255\023\001\019\001\020\001\019\001\020\001\023\001\255\255\
\023\001\031\001\255\255\019\001\020\001\255\255\031\001\023\001\
\031\001\255\255\255\255\255\255\001\001\002\001\003\001\031\001\
\005\001\006\001\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\255\255\255\255\020\001\
\021\001\255\255\255\255\255\255\025\001\255\255\255\255\255\255\
\029\001\030\001\255\255\032\001\001\001\002\001\003\001\255\255\
\005\001\006\001\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\255\255\255\255\255\255\
\021\001\255\255\255\255\255\255\025\001\255\255\255\255\255\255\
\029\001\030\001\031\001\032\001\001\001\002\001\003\001\255\255\
\005\001\006\001\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\255\255\255\255\255\255\
\021\001\255\255\255\255\255\255\025\001\255\255\255\255\255\255\
\029\001\030\001\031\001\032\001\001\001\002\001\003\001\255\255\
\005\001\006\001\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\255\255\255\255\255\255\
\021\001\255\255\023\001\255\255\025\001\255\255\255\255\255\255\
\029\001\030\001\255\255\032\001\001\001\002\001\003\001\255\255\
\005\001\006\001\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\255\255\255\255\255\255\
\021\001\255\255\255\255\255\255\025\001\255\255\255\255\255\255\
\029\001\030\001\255\255\032\001\001\001\002\001\003\001\255\255\
\005\001\006\001\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\255\255\255\255\255\255\
\021\001\255\255\255\255\255\255\025\001\255\255\255\255\255\255\
\255\255\030\001\255\255\032\001\001\001\002\001\003\001\255\255\
\005\001\006\001\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\255\255\255\255\255\255\
\021\001\000\001\001\001\002\001\003\001\004\001\005\001\255\255\
\007\001\030\001\255\255\032\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\018\001\255\255\255\255\021\001\022\001\
\255\255\255\255\255\255\026\001\255\255\255\255\255\255\030\001\
\031\001\001\001\002\001\003\001\255\255\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\255\255\000\001\001\001\002\001\
\003\001\004\001\005\001\255\255\007\001\021\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\030\001\018\001\
\032\001\255\255\021\001\022\001\255\255\255\255\255\255\026\001\
\255\255\255\255\255\255\030\001"

let yynames_const = "\
  NOT\000\
  MINUS\000\
  PLUS\000\
  MINUS_DOT\000\
  PLUS_DOT\000\
  AST\000\
  AST_DOT\000\
  SLASH_DOT\000\
  EQUAL\000\
  LESS_GREATER\000\
  LESS_EQUAL\000\
  GREATER_EQUAL\000\
  LESS\000\
  GREATER\000\
  IF\000\
  THEN\000\
  ELSE\000\
  LET\000\
  IN\000\
  REC\000\
  COMMA\000\
  ARRAY_CREATE\000\
  DOT\000\
  LESS_MINUS\000\
  SEMICOLON\000\
  LPAREN\000\
  RPAREN\000\
  EOF\000\
  SLASH\000\
  "

let yynames_block = "\
  BOOL\000\
  INT\000\
  FLOAT\000\
  IDENT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Syntax.t) in
    Obj.repr(
# 68 "parser.mly"
      ( _2 )
# 545 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    Obj.repr(
# 70 "parser.mly"
   ( Unit )
# 551 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 72 "parser.mly"
       ( Bool(_1) )
# 558 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 74 "parser.mly"
    ( Int(_1) )
# 565 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 76 "parser.mly"
        ( Float(_1) )
# 572 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 78 "parser.mly"
      ( Var(_1) )
# 579 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'simple_exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Syntax.t) in
    Obj.repr(
# 80 "parser.mly"
         (
				let p = Parsing.rhs_start_pos 2 in
				  Info({ln = p.pos_lnum; cn=p.pos_cnum - p.pos_bol}, Get(_1, _4)) )
# 589 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 86 "parser.mly"
      ( _1 )
# 596 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 89 "parser.mly"
(
  let p = Parsing.rhs_start_pos 1 in
    Info({ln = p.pos_lnum; cn=p.pos_cnum - p.pos_bol}, Not(_2)) )
# 605 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 94 "parser.mly"
(
  let p = Parsing.rhs_start_pos 1 in
    Info({ln = p.pos_lnum; cn=p.pos_cnum - p.pos_bol}, match _2 with
	   | Float(f) -> Float(-.f) (* -1.23などは型エラーではないので別扱い *)
	   | e -> Neg(e)) )
# 616 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 100 "parser.mly"
    (
      let p = Parsing.rhs_start_pos 2 in
	Info({ln = p.pos_lnum; cn=p.pos_cnum - p.pos_bol}, Add(_1, _3)) )
# 626 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 104 "parser.mly"
 (
	  let p = Parsing.rhs_start_pos 2 in
	    Info({ln = p.pos_lnum; cn=p.pos_cnum - p.pos_bol}, Sub(_1, _3)) )
# 636 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 108 "parser.mly"
     (
	      let p = Parsing.rhs_start_pos 2 in
		Info({ln = p.pos_lnum; cn=0 }, Eq(_1, _3)) )
# 646 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 112 "parser.mly"
  (
		  let p = Parsing.rhs_start_pos 2 in
		    Info({ln = p.pos_lnum; cn=p.pos_cnum - p.pos_bol}, Not(Eq(_1, _3))) )
# 656 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 116 "parser.mly"
      (
		      let p = Parsing.rhs_start_pos 2 in
			Info({ln = p.pos_lnum; cn=p.pos_cnum - p.pos_bol}, Not(LE(_3, _1))) )
# 666 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 120 "parser.mly"
   (
			  let p = Parsing.rhs_start_pos 2 in
			    Info({ln = p.pos_lnum; cn=p.pos_cnum - p.pos_bol}, Not(LE(_1, _3))) )
# 676 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 124 "parser.mly"
       (
			      let p = Parsing.rhs_start_pos 2 in
				Info({ln = p.pos_lnum; cn=p.pos_cnum - p.pos_bol}, LE(_1, _3)) )
# 686 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 128 "parser.mly"
    (
				  let p = Parsing.rhs_start_pos 2 in
				    Info({ln = p.pos_lnum; cn=p.pos_cnum - p.pos_bol}, LE(_3, _1)) )
# 696 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Syntax.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 133 "parser.mly"
(
  let p = Parsing.rhs_start_pos 1 in
    Info({ln = p.pos_lnum; cn=p.pos_cnum - p.pos_bol}, If(_2, _4, _6)) )
# 707 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 138 "parser.mly"
(
  let p = Parsing.rhs_start_pos 1 in
    Info({ln = p.pos_lnum; cn=p.pos_cnum - p.pos_bol}, FNeg(_2)) )
# 716 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 142 "parser.mly"
    (
      let p = Parsing.rhs_start_pos 2 in
	Info({ln = p.pos_lnum; cn=p.pos_cnum - p.pos_bol}, FAdd(_1, _3)) )
# 726 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 146 "parser.mly"
 (
	  let p = Parsing.rhs_start_pos 2 in
	    Info({ln = p.pos_lnum; cn=p.pos_cnum - p.pos_bol}, FSub(_1, _3)) )
# 736 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 150 "parser.mly"
     (
	      let p = Parsing.rhs_start_pos 2 in
		Info({ln = p.pos_lnum; cn=p.pos_cnum - p.pos_bol}, Mul(_1, _3)) )
# 746 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 154 "parser.mly"
     (
	      let p = Parsing.rhs_start_pos 2 in
		Info({ln = p.pos_lnum; cn=p.pos_cnum - p.pos_bol}, Div(_1, _3)) )
# 756 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 158 "parser.mly"
     (
	      let p = Parsing.rhs_start_pos 2 in
		Info({ln = p.pos_lnum; cn=p.pos_cnum - p.pos_bol}, FMul(_1, _3)) )
# 766 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 162 "parser.mly"
  (
		  let p = Parsing.rhs_start_pos 2 in
		    Info({ln = p.pos_lnum; cn=p.pos_cnum - p.pos_bol}, FDiv(_1, _3)) )
# 776 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Id.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 167 "parser.mly"
( Let(addtyp _2, _4, _6) )
# 785 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'fundef) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 170 "parser.mly"
(
  let p = Parsing.rhs_start_pos 3 in
    Info({ln = p.pos_lnum; cn=p.pos_cnum - p.pos_bol }, LetRec(_3, _5)) )
# 795 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Syntax.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'actual_args) in
    Obj.repr(
# 175 "parser.mly"
(
  let p = Parsing.rhs_start_pos 1 in
    Info({ln = p.pos_lnum; cn=p.pos_cnum - p.pos_bol}, App(_1, _2)) )
# 805 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'elems) in
    Obj.repr(
# 179 "parser.mly"
    ( Tuple(_1) )
# 812 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'pat) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 181 "parser.mly"
 (
	  let p = Parsing.rhs_start_pos 1 in
	    Info({ln = p.pos_lnum; cn=p.pos_cnum - p.pos_bol}, LetTuple(_3, _6, _8)) )
# 823 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'simple_exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : Syntax.t) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 185 "parser.mly"
     (
	      let p = Parsing.rhs_start_pos 6 in
		Info({ln = p.pos_lnum; cn=p.pos_cnum - p.pos_bol}, Put(_1, _4, _7)) )
# 834 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Syntax.t) in
    Obj.repr(
# 189 "parser.mly"
  ( _1 )
# 841 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 191 "parser.mly"
      ( Let((Id.gentmp Type.Unit, Type.Unit), _1, _3) )
# 849 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'simple_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 194 "parser.mly"
(
  let p = Parsing.rhs_start_pos 1 in
    Info({ln = p.pos_lnum; cn=p.pos_cnum - p.pos_bol}, Array(_2, _3)) )
# 859 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    Obj.repr(
# 198 "parser.mly"
    (
      failwith
	(Printf.sprintf "parse error near lines %d, characters %d"
	   !line_num
	   (Parsing.symbol_start () - !char_num + 2) )
    )
# 870 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Id.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'formal_args) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 207 "parser.mly"
 ( { name = addtyp _1; args = _2; body = _4 } )
# 879 "parser.ml"
               : 'fundef))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Id.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'formal_args) in
    Obj.repr(
# 211 "parser.mly"
     ( addtyp _1 :: _2 )
# 887 "parser.ml"
               : 'formal_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 213 "parser.mly"
  ( [addtyp _1] )
# 894 "parser.ml"
               : 'formal_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'actual_args) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 218 "parser.mly"
( _1 @ [_2] )
# 902 "parser.ml"
               : 'actual_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 221 "parser.mly"
( [_1] )
# 909 "parser.ml"
               : 'actual_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'elems) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 225 "parser.mly"
    ( _1 @ [_3] )
# 917 "parser.ml"
               : 'elems))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 227 "parser.mly"
 ( [_1; _3] )
# 925 "parser.ml"
               : 'elems))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pat) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 231 "parser.mly"
     ( _1 @ [addtyp _3] )
# 933 "parser.ml"
               : 'pat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Id.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 233 "parser.mly"
  ( [addtyp _1; addtyp _3] )
# 941 "parser.ml"
               : 'pat))
(* Entry exp *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let exp (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Syntax.t)
