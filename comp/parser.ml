type token =
  | BOOL of (bool)
  | INT of (int)
  | FLOAT of (float)
  | NOT
  | MINUS
  | PLUS
  | MINUS_DOT
  | PLUS_DOT
  | AST
  | AST_DOT
  | SLASH_DOT
  | EQUAL
  | LESS_GREATER
  | LESS_EQUAL
  | GREATER_EQUAL
  | LESS
  | GREATER
  | IF
  | THEN
  | ELSE
  | IDENT of (Id.t)
  | LET
  | IN
  | REC
  | COMMA
  | ARRAY_CREATE
  | DOT
  | LESS_MINUS
  | SEMICOLON
  | LPAREN
  | RPAREN
  | EOF
  | FLOAT_OF_INT
  | FLOOR
  | SLASH

open Parsing;;
# 2 "parser.mly"
  (* parserが利用する変数、関数、型などの定義 *)
  open Syntax
  open Lexing
    
  let addtyp x = (x, Type.gentyp ())

# 47 "parser.ml"
let yytransl_const = [|
  260 (* NOT *);
  261 (* MINUS *);
  262 (* PLUS *);
  263 (* MINUS_DOT *);
  264 (* PLUS_DOT *);
  265 (* AST *);
  266 (* AST_DOT *);
  267 (* SLASH_DOT *);
  268 (* EQUAL *);
  269 (* LESS_GREATER *);
  270 (* LESS_EQUAL *);
  271 (* GREATER_EQUAL *);
  272 (* LESS *);
  273 (* GREATER *);
  274 (* IF *);
  275 (* THEN *);
  276 (* ELSE *);
  278 (* LET *);
  279 (* IN *);
  280 (* REC *);
  281 (* COMMA *);
  282 (* ARRAY_CREATE *);
  283 (* DOT *);
  284 (* LESS_MINUS *);
  285 (* SEMICOLON *);
  286 (* LPAREN *);
  287 (* RPAREN *);
    0 (* EOF *);
  288 (* FLOAT_OF_INT *);
  289 (* FLOOR *);
  290 (* SLASH *);
    0|]

let yytransl_block = [|
  257 (* BOOL *);
  258 (* INT *);
  259 (* FLOAT *);
  277 (* IDENT *);
    0|]

let yylhs = "\255\255\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\003\000\
\007\000\007\000\004\000\004\000\005\000\005\000\006\000\006\000\
\000\000"

let yylen = "\002\000\
\003\000\002\000\001\000\001\000\001\000\001\000\005\000\001\000\
\002\000\002\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\006\000\002\000\003\000\003\000\003\000\003\000\
\003\000\003\000\006\000\005\000\002\000\001\000\008\000\007\000\
\002\000\004\000\003\000\003\000\002\000\002\000\001\000\004\000\
\002\000\001\000\002\000\001\000\003\000\003\000\003\000\003\000\
\002\000"

let yydefred = "\000\000\
\000\000\000\000\039\000\003\000\004\000\005\000\000\000\000\000\
\000\000\000\000\006\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\041\000\000\000\000\000\048\000\
\047\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\007\000\000\000\000\000\000\000\000\000"

let yydgoto = "\002\000\
\075\000\018\000\055\000\049\000\019\000\057\000\083\000"

let yysindex = "\255\255\
\180\004\000\000\000\000\000\000\000\000\000\000\180\004\180\004\
\180\004\180\004\000\000\241\254\031\255\222\255\180\004\180\004\
\068\004\236\254\239\254\031\255\031\255\031\255\102\003\254\254\
\251\254\000\255\001\255\000\000\132\003\031\255\031\255\180\004\
\180\004\180\004\180\004\180\004\180\004\180\004\180\004\180\004\
\180\004\180\004\180\004\180\004\180\004\180\004\180\004\253\254\
\031\255\252\254\180\004\180\004\180\004\004\255\006\255\002\255\
\248\254\020\255\253\254\000\000\106\255\106\255\106\255\106\255\
\031\255\031\255\031\255\057\255\057\255\057\255\057\255\057\255\
\057\255\158\004\098\004\031\255\253\254\180\004\158\004\166\003\
\196\003\004\255\018\255\180\004\032\255\033\255\058\255\180\004\
\180\004\226\003\180\004\180\004\000\000\180\004\068\004\000\000\
\000\000\180\004\004\004\043\255\128\004\068\004\068\004\038\004\
\000\000\180\004\180\004\128\004\068\004"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\072\000\035\000\171\000\201\000\231\000\005\001\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\039\001\073\001\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\023\002\000\000\069\000\
\107\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\103\000\000\000\057\002\091\002\125\002\159\002\
\141\001\175\001\219\001\179\002\199\002\219\002\240\002\011\003\
\041\003\247\002\139\002\249\001\137\000\000\000\055\003\000\000\
\000\000\061\255\000\000\000\000\000\000\000\000\000\000\000\000\
\023\002\000\000\000\000\000\000\000\000\000\000\028\003\000\000\
\000\000\000\000\000\000\001\000\071\002\068\003\051\255\000\000\
\000\000\000\000\000\000\105\002\075\003"

let yygindex = "\000\000\
\004\000\112\000\000\000\000\000\000\000\000\000\249\255"

let yytablesize = 1493
let yytable = "\001\000\
\007\000\004\000\005\000\006\000\017\000\024\000\050\000\051\000\
\025\000\053\000\020\000\021\000\022\000\023\000\026\000\054\000\
\086\000\029\000\030\000\031\000\056\000\011\000\087\000\058\000\
\082\000\078\000\085\000\058\000\084\000\094\000\014\000\004\000\
\005\000\006\000\008\000\061\000\062\000\063\000\064\000\065\000\
\066\000\067\000\068\000\069\000\070\000\071\000\072\000\073\000\
\074\000\088\000\076\000\011\000\096\000\097\000\079\000\080\000\
\081\000\004\000\005\000\006\000\014\000\032\000\033\000\034\000\
\035\000\036\000\037\000\038\000\044\000\098\000\106\000\049\000\
\042\000\040\000\093\000\000\000\000\000\011\000\000\000\000\000\
\000\000\090\000\000\000\000\000\000\000\000\000\014\000\095\000\
\000\000\000\000\047\000\099\000\000\000\000\000\101\000\102\000\
\000\000\103\000\000\000\000\000\000\000\104\000\036\000\000\000\
\000\000\000\000\004\000\005\000\006\000\108\000\109\000\000\000\
\000\000\000\000\036\000\037\000\038\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\027\000\000\000\011\000\000\000\
\048\000\000\000\000\000\048\000\048\000\048\000\048\000\014\000\
\043\000\000\000\059\000\047\000\048\000\048\000\048\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\077\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\030\000\000\000\048\000\048\000\048\000\048\000\
\048\000\048\000\048\000\048\000\048\000\048\000\048\000\048\000\
\048\000\048\000\048\000\048\000\000\000\000\000\048\000\048\000\
\048\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\009\000\048\000\000\000\000\000\000\000\000\000\048\000\000\000\
\000\000\000\000\048\000\000\000\048\000\048\000\048\000\048\000\
\000\000\000\000\000\000\048\000\048\000\003\000\004\000\005\000\
\006\000\007\000\008\000\000\000\009\000\000\000\010\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\010\000\
\000\000\000\000\011\000\012\000\000\000\000\000\000\000\013\000\
\000\000\000\000\000\000\014\000\028\000\015\000\016\000\000\000\
\000\000\007\000\007\000\007\000\020\000\007\000\007\000\007\000\
\007\000\007\000\007\000\007\000\007\000\007\000\007\000\007\000\
\007\000\007\000\000\000\007\000\007\000\007\000\000\000\007\000\
\000\000\007\000\000\000\007\000\000\000\007\000\007\000\007\000\
\000\000\000\000\007\000\008\000\008\000\008\000\037\000\008\000\
\008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
\008\000\008\000\008\000\008\000\000\000\008\000\008\000\008\000\
\000\000\008\000\000\000\008\000\000\000\000\000\000\000\008\000\
\008\000\008\000\000\000\000\000\008\000\044\000\044\000\044\000\
\038\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
\044\000\044\000\044\000\044\000\044\000\044\000\000\000\044\000\
\044\000\044\000\000\000\044\000\000\000\044\000\000\000\000\000\
\000\000\044\000\044\000\044\000\000\000\000\000\044\000\036\000\
\036\000\036\000\029\000\036\000\036\000\036\000\036\000\036\000\
\036\000\036\000\036\000\036\000\036\000\036\000\036\000\036\000\
\000\000\036\000\036\000\036\000\000\000\036\000\000\000\036\000\
\000\000\000\000\000\000\036\000\036\000\036\000\000\000\000\000\
\036\000\043\000\043\000\043\000\023\000\043\000\043\000\043\000\
\043\000\043\000\043\000\043\000\043\000\043\000\043\000\043\000\
\043\000\043\000\000\000\043\000\043\000\043\000\000\000\043\000\
\000\000\043\000\000\000\000\000\000\000\043\000\043\000\043\000\
\000\000\000\000\043\000\030\000\030\000\030\000\025\000\030\000\
\030\000\030\000\030\000\030\000\030\000\030\000\030\000\030\000\
\030\000\030\000\030\000\030\000\000\000\030\000\030\000\030\000\
\000\000\030\000\000\000\000\000\000\000\000\000\000\000\030\000\
\030\000\030\000\000\000\000\000\030\000\009\000\009\000\009\000\
\009\000\009\000\009\000\009\000\009\000\009\000\009\000\009\000\
\009\000\009\000\026\000\009\000\009\000\000\000\000\000\009\000\
\000\000\009\000\000\000\000\000\000\000\009\000\000\000\009\000\
\000\000\000\000\009\000\010\000\010\000\010\000\010\000\010\000\
\010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
\024\000\010\000\010\000\000\000\000\000\010\000\000\000\010\000\
\000\000\000\000\000\000\010\000\000\000\010\000\000\000\000\000\
\010\000\020\000\020\000\020\000\020\000\020\000\020\000\020\000\
\020\000\020\000\020\000\020\000\020\000\020\000\033\000\020\000\
\020\000\000\000\000\000\020\000\000\000\020\000\000\000\000\000\
\000\000\020\000\000\000\020\000\000\000\000\000\020\000\000\000\
\000\000\000\000\000\000\037\000\037\000\037\000\037\000\037\000\
\037\000\037\000\037\000\037\000\037\000\037\000\037\000\037\000\
\012\000\037\000\037\000\000\000\000\000\037\000\000\000\037\000\
\000\000\000\000\000\000\037\000\000\000\037\000\019\000\000\000\
\037\000\000\000\000\000\000\000\000\000\038\000\038\000\038\000\
\038\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
\038\000\038\000\011\000\038\000\038\000\000\000\000\000\038\000\
\000\000\038\000\000\000\000\000\000\000\038\000\000\000\038\000\
\032\000\000\000\038\000\000\000\000\000\000\000\000\000\029\000\
\029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
\029\000\029\000\029\000\029\000\022\000\029\000\029\000\000\000\
\000\000\029\000\000\000\029\000\000\000\000\000\000\000\029\000\
\000\000\029\000\035\000\000\000\029\000\000\000\000\000\000\000\
\000\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
\023\000\023\000\023\000\023\000\023\000\023\000\021\000\023\000\
\023\000\000\000\000\000\023\000\000\000\023\000\000\000\000\000\
\000\000\023\000\000\000\023\000\000\000\000\000\023\000\000\000\
\000\000\000\000\013\000\025\000\025\000\025\000\025\000\025\000\
\025\000\025\000\025\000\025\000\025\000\025\000\025\000\025\000\
\000\000\025\000\025\000\000\000\000\000\025\000\014\000\025\000\
\000\000\000\000\000\000\025\000\000\000\025\000\000\000\000\000\
\025\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\017\000\000\000\000\000\000\000\000\000\026\000\
\026\000\026\000\026\000\026\000\026\000\026\000\026\000\026\000\
\026\000\026\000\026\000\026\000\000\000\026\000\026\000\018\000\
\000\000\026\000\000\000\026\000\000\000\000\000\046\000\026\000\
\000\000\026\000\000\000\000\000\026\000\024\000\024\000\024\000\
\024\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
\024\000\024\000\015\000\024\000\024\000\000\000\000\000\024\000\
\000\000\024\000\000\000\000\000\000\000\024\000\000\000\024\000\
\000\000\000\000\024\000\028\000\033\000\000\000\033\000\033\000\
\033\000\033\000\033\000\033\000\033\000\033\000\033\000\033\000\
\016\000\033\000\033\000\000\000\000\000\033\000\000\000\033\000\
\000\000\000\000\000\000\033\000\000\000\033\000\045\000\000\000\
\033\000\000\000\000\000\000\000\000\000\012\000\012\000\012\000\
\012\000\000\000\000\000\027\000\012\000\012\000\012\000\012\000\
\012\000\012\000\031\000\012\000\012\000\000\000\000\000\012\000\
\000\000\012\000\000\000\000\000\000\000\012\000\000\000\012\000\
\000\000\019\000\019\000\000\000\000\000\019\000\000\000\011\000\
\011\000\011\000\011\000\019\000\000\000\019\000\011\000\011\000\
\011\000\011\000\011\000\011\000\000\000\011\000\011\000\000\000\
\000\000\011\000\000\000\011\000\000\000\000\000\000\000\011\000\
\000\000\011\000\000\000\032\000\032\000\000\000\000\000\032\000\
\000\000\022\000\022\000\022\000\022\000\032\000\000\000\032\000\
\022\000\022\000\022\000\022\000\022\000\022\000\000\000\022\000\
\022\000\000\000\000\000\022\000\000\000\022\000\000\000\000\000\
\000\000\022\000\000\000\022\000\000\000\035\000\035\000\000\000\
\000\000\035\000\000\000\021\000\021\000\021\000\021\000\000\000\
\000\000\035\000\021\000\021\000\021\000\021\000\021\000\021\000\
\000\000\021\000\021\000\000\000\000\000\021\000\000\000\021\000\
\000\000\000\000\000\000\021\000\000\000\021\000\013\000\013\000\
\013\000\013\000\013\000\013\000\000\000\013\000\013\000\000\000\
\000\000\013\000\000\000\013\000\000\000\000\000\000\000\013\000\
\000\000\013\000\014\000\014\000\014\000\014\000\014\000\014\000\
\000\000\014\000\014\000\000\000\000\000\014\000\000\000\014\000\
\000\000\000\000\000\000\014\000\000\000\014\000\017\000\017\000\
\017\000\017\000\017\000\017\000\000\000\017\000\017\000\000\000\
\000\000\017\000\000\000\017\000\000\000\000\000\000\000\017\000\
\000\000\017\000\000\000\018\000\018\000\018\000\018\000\018\000\
\018\000\000\000\018\000\018\000\000\000\000\000\018\000\000\000\
\018\000\046\000\046\000\000\000\018\000\046\000\018\000\046\000\
\000\000\000\000\000\000\046\000\000\000\046\000\015\000\015\000\
\015\000\015\000\015\000\015\000\000\000\015\000\015\000\000\000\
\000\000\015\000\000\000\015\000\000\000\000\000\000\000\015\000\
\000\000\015\000\000\000\000\000\000\000\000\000\028\000\028\000\
\000\000\000\000\028\000\000\000\016\000\016\000\016\000\016\000\
\016\000\016\000\028\000\016\000\016\000\000\000\000\000\016\000\
\000\000\016\000\000\000\000\000\000\000\016\000\000\000\016\000\
\000\000\045\000\045\000\000\000\000\000\045\000\000\000\045\000\
\000\000\000\000\000\000\045\000\000\000\045\000\027\000\027\000\
\000\000\000\000\027\000\000\000\000\000\031\000\031\000\000\000\
\000\000\031\000\027\000\000\000\000\000\000\000\004\000\005\000\
\006\000\031\000\032\000\033\000\034\000\035\000\036\000\037\000\
\038\000\039\000\040\000\041\000\042\000\043\000\044\000\000\000\
\052\000\000\000\011\000\000\000\000\000\000\000\045\000\000\000\
\000\000\000\000\046\000\014\000\004\000\005\000\006\000\047\000\
\032\000\033\000\034\000\035\000\036\000\037\000\038\000\039\000\
\040\000\041\000\042\000\043\000\044\000\000\000\000\000\000\000\
\011\000\000\000\000\000\000\000\045\000\000\000\000\000\000\000\
\046\000\014\000\060\000\000\000\000\000\047\000\004\000\005\000\
\006\000\000\000\032\000\033\000\034\000\035\000\036\000\037\000\
\038\000\039\000\040\000\041\000\042\000\043\000\044\000\000\000\
\000\000\091\000\011\000\000\000\000\000\000\000\045\000\000\000\
\000\000\000\000\046\000\014\000\004\000\005\000\006\000\047\000\
\032\000\033\000\034\000\035\000\036\000\037\000\038\000\039\000\
\040\000\041\000\042\000\043\000\044\000\000\000\000\000\000\000\
\011\000\000\000\092\000\000\000\045\000\000\000\000\000\000\000\
\046\000\014\000\004\000\005\000\006\000\047\000\032\000\033\000\
\034\000\035\000\036\000\037\000\038\000\039\000\040\000\041\000\
\042\000\043\000\044\000\000\000\000\000\000\000\011\000\000\000\
\000\000\000\000\045\000\000\000\000\000\000\000\046\000\014\000\
\100\000\000\000\000\000\047\000\004\000\005\000\006\000\000\000\
\032\000\033\000\034\000\035\000\036\000\037\000\038\000\039\000\
\040\000\041\000\042\000\043\000\044\000\000\000\000\000\000\000\
\011\000\000\000\000\000\000\000\045\000\000\000\000\000\000\000\
\046\000\014\000\105\000\000\000\000\000\047\000\004\000\005\000\
\006\000\000\000\032\000\033\000\034\000\035\000\036\000\037\000\
\038\000\039\000\040\000\041\000\042\000\043\000\044\000\000\000\
\000\000\000\000\011\000\000\000\107\000\000\000\045\000\000\000\
\000\000\000\000\046\000\014\000\004\000\005\000\006\000\047\000\
\032\000\033\000\034\000\035\000\036\000\037\000\038\000\039\000\
\040\000\041\000\042\000\043\000\044\000\000\000\000\000\000\000\
\011\000\000\000\000\000\000\000\045\000\000\000\000\000\000\000\
\046\000\014\000\004\000\005\000\006\000\047\000\032\000\033\000\
\034\000\035\000\036\000\037\000\038\000\039\000\040\000\041\000\
\042\000\043\000\044\000\000\000\000\000\000\000\011\000\000\000\
\000\000\000\000\045\000\000\000\000\000\000\000\089\000\014\000\
\004\000\005\000\006\000\047\000\032\000\033\000\034\000\035\000\
\036\000\037\000\038\000\039\000\040\000\041\000\042\000\043\000\
\044\000\000\000\000\000\000\000\011\000\000\000\000\000\000\000\
\045\000\000\000\000\000\000\000\000\000\014\000\004\000\005\000\
\006\000\047\000\032\000\033\000\034\000\035\000\036\000\037\000\
\038\000\039\000\040\000\041\000\042\000\043\000\044\000\000\000\
\000\000\000\000\011\000\003\000\004\000\005\000\006\000\007\000\
\008\000\000\000\009\000\014\000\000\000\000\000\000\000\047\000\
\000\000\000\000\000\000\000\000\000\000\010\000\000\000\000\000\
\011\000\012\000\000\000\000\000\000\000\013\000\000\000\000\000\
\000\000\014\000\000\000\015\000\016\000"

let yycheck = "\001\000\
\000\000\001\001\002\001\003\001\001\000\021\001\027\001\025\001\
\024\001\012\001\007\000\008\000\009\000\010\000\030\001\021\001\
\025\001\014\000\015\000\016\000\021\001\021\001\031\001\027\001\
\021\001\030\001\025\001\027\001\023\001\012\001\030\001\001\001\
\002\001\003\001\000\000\032\000\033\000\034\000\035\000\036\000\
\037\000\038\000\039\000\040\000\041\000\042\000\043\000\044\000\
\045\000\030\001\047\000\021\001\021\001\021\001\051\000\052\000\
\053\000\001\001\002\001\003\001\030\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\000\000\012\001\028\001\000\000\
\012\001\023\001\082\000\255\255\255\255\021\001\255\255\255\255\
\255\255\078\000\255\255\255\255\255\255\255\255\030\001\084\000\
\255\255\255\255\034\001\088\000\255\255\255\255\091\000\092\000\
\255\255\094\000\255\255\255\255\255\255\098\000\000\000\255\255\
\255\255\255\255\001\001\002\001\003\001\106\000\107\000\255\255\
\255\255\255\255\009\001\010\001\011\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\013\000\255\255\021\001\255\255\
\017\000\255\255\255\255\020\000\021\000\022\000\023\000\030\001\
\000\000\255\255\027\000\034\001\029\000\030\000\031\000\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\049\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\000\000\255\255\061\000\062\000\063\000\064\000\
\065\000\066\000\067\000\068\000\069\000\070\000\071\000\072\000\
\073\000\074\000\075\000\076\000\255\255\255\255\079\000\080\000\
\081\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\000\000\090\000\255\255\255\255\255\255\255\255\095\000\255\255\
\255\255\255\255\099\000\255\255\101\000\102\000\103\000\104\000\
\255\255\255\255\255\255\108\000\109\000\000\001\001\001\002\001\
\003\001\004\001\005\001\255\255\007\001\255\255\000\000\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\018\001\
\255\255\255\255\021\001\022\001\255\255\255\255\255\255\026\001\
\255\255\255\255\255\255\030\001\031\001\032\001\033\001\255\255\
\255\255\001\001\002\001\003\001\000\000\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\255\255\019\001\020\001\021\001\255\255\023\001\
\255\255\025\001\255\255\027\001\255\255\029\001\030\001\031\001\
\255\255\255\255\034\001\001\001\002\001\003\001\000\000\005\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\255\255\019\001\020\001\021\001\
\255\255\023\001\255\255\025\001\255\255\255\255\255\255\029\001\
\030\001\031\001\255\255\255\255\034\001\001\001\002\001\003\001\
\000\000\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\255\255\019\001\
\020\001\021\001\255\255\023\001\255\255\025\001\255\255\255\255\
\255\255\029\001\030\001\031\001\255\255\255\255\034\001\001\001\
\002\001\003\001\000\000\005\001\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\255\255\019\001\020\001\021\001\255\255\023\001\255\255\025\001\
\255\255\255\255\255\255\029\001\030\001\031\001\255\255\255\255\
\034\001\001\001\002\001\003\001\000\000\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\255\255\019\001\020\001\021\001\255\255\023\001\
\255\255\025\001\255\255\255\255\255\255\029\001\030\001\031\001\
\255\255\255\255\034\001\001\001\002\001\003\001\000\000\005\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\255\255\019\001\020\001\021\001\
\255\255\023\001\255\255\255\255\255\255\255\255\255\255\029\001\
\030\001\031\001\255\255\255\255\034\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\000\000\019\001\020\001\255\255\255\255\023\001\
\255\255\025\001\255\255\255\255\255\255\029\001\255\255\031\001\
\255\255\255\255\034\001\005\001\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\000\000\019\001\020\001\255\255\255\255\023\001\255\255\025\001\
\255\255\255\255\255\255\029\001\255\255\031\001\255\255\255\255\
\034\001\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\000\000\019\001\
\020\001\255\255\255\255\023\001\255\255\025\001\255\255\255\255\
\255\255\029\001\255\255\031\001\255\255\255\255\034\001\255\255\
\255\255\255\255\255\255\005\001\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\000\000\019\001\020\001\255\255\255\255\023\001\255\255\025\001\
\255\255\255\255\255\255\029\001\255\255\031\001\000\000\255\255\
\034\001\255\255\255\255\255\255\255\255\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\000\000\019\001\020\001\255\255\255\255\023\001\
\255\255\025\001\255\255\255\255\255\255\029\001\255\255\031\001\
\000\000\255\255\034\001\255\255\255\255\255\255\255\255\005\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\000\000\019\001\020\001\255\255\
\255\255\023\001\255\255\025\001\255\255\255\255\255\255\029\001\
\255\255\031\001\000\000\255\255\034\001\255\255\255\255\255\255\
\255\255\005\001\006\001\007\001\008\001\009\001\010\001\011\001\
\012\001\013\001\014\001\015\001\016\001\017\001\000\000\019\001\
\020\001\255\255\255\255\023\001\255\255\025\001\255\255\255\255\
\255\255\029\001\255\255\031\001\255\255\255\255\034\001\255\255\
\255\255\255\255\000\000\005\001\006\001\007\001\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\255\255\019\001\020\001\255\255\255\255\023\001\000\000\025\001\
\255\255\255\255\255\255\029\001\255\255\031\001\255\255\255\255\
\034\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\000\000\255\255\255\255\255\255\255\255\005\001\
\006\001\007\001\008\001\009\001\010\001\011\001\012\001\013\001\
\014\001\015\001\016\001\017\001\255\255\019\001\020\001\000\000\
\255\255\023\001\255\255\025\001\255\255\255\255\000\000\029\001\
\255\255\031\001\255\255\255\255\034\001\005\001\006\001\007\001\
\008\001\009\001\010\001\011\001\012\001\013\001\014\001\015\001\
\016\001\017\001\000\000\019\001\020\001\255\255\255\255\023\001\
\255\255\025\001\255\255\255\255\255\255\029\001\255\255\031\001\
\255\255\255\255\034\001\000\000\006\001\255\255\008\001\009\001\
\010\001\011\001\012\001\013\001\014\001\015\001\016\001\017\001\
\000\000\019\001\020\001\255\255\255\255\023\001\255\255\025\001\
\255\255\255\255\255\255\029\001\255\255\031\001\000\000\255\255\
\034\001\255\255\255\255\255\255\255\255\005\001\006\001\007\001\
\008\001\255\255\255\255\000\000\012\001\013\001\014\001\015\001\
\016\001\017\001\000\000\019\001\020\001\255\255\255\255\023\001\
\255\255\025\001\255\255\255\255\255\255\029\001\255\255\031\001\
\255\255\019\001\020\001\255\255\255\255\023\001\255\255\005\001\
\006\001\007\001\008\001\029\001\255\255\031\001\012\001\013\001\
\014\001\015\001\016\001\017\001\255\255\019\001\020\001\255\255\
\255\255\023\001\255\255\025\001\255\255\255\255\255\255\029\001\
\255\255\031\001\255\255\019\001\020\001\255\255\255\255\023\001\
\255\255\005\001\006\001\007\001\008\001\029\001\255\255\031\001\
\012\001\013\001\014\001\015\001\016\001\017\001\255\255\019\001\
\020\001\255\255\255\255\023\001\255\255\025\001\255\255\255\255\
\255\255\029\001\255\255\031\001\255\255\019\001\020\001\255\255\
\255\255\023\001\255\255\005\001\006\001\007\001\008\001\255\255\
\255\255\031\001\012\001\013\001\014\001\015\001\016\001\017\001\
\255\255\019\001\020\001\255\255\255\255\023\001\255\255\025\001\
\255\255\255\255\255\255\029\001\255\255\031\001\012\001\013\001\
\014\001\015\001\016\001\017\001\255\255\019\001\020\001\255\255\
\255\255\023\001\255\255\025\001\255\255\255\255\255\255\029\001\
\255\255\031\001\012\001\013\001\014\001\015\001\016\001\017\001\
\255\255\019\001\020\001\255\255\255\255\023\001\255\255\025\001\
\255\255\255\255\255\255\029\001\255\255\031\001\012\001\013\001\
\014\001\015\001\016\001\017\001\255\255\019\001\020\001\255\255\
\255\255\023\001\255\255\025\001\255\255\255\255\255\255\029\001\
\255\255\031\001\255\255\012\001\013\001\014\001\015\001\016\001\
\017\001\255\255\019\001\020\001\255\255\255\255\023\001\255\255\
\025\001\019\001\020\001\255\255\029\001\023\001\031\001\025\001\
\255\255\255\255\255\255\029\001\255\255\031\001\012\001\013\001\
\014\001\015\001\016\001\017\001\255\255\019\001\020\001\255\255\
\255\255\023\001\255\255\025\001\255\255\255\255\255\255\029\001\
\255\255\031\001\255\255\255\255\255\255\255\255\019\001\020\001\
\255\255\255\255\023\001\255\255\012\001\013\001\014\001\015\001\
\016\001\017\001\031\001\019\001\020\001\255\255\255\255\023\001\
\255\255\025\001\255\255\255\255\255\255\029\001\255\255\031\001\
\255\255\019\001\020\001\255\255\255\255\023\001\255\255\025\001\
\255\255\255\255\255\255\029\001\255\255\031\001\019\001\020\001\
\255\255\255\255\023\001\255\255\255\255\019\001\020\001\255\255\
\255\255\023\001\031\001\255\255\255\255\255\255\001\001\002\001\
\003\001\031\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\255\255\
\019\001\255\255\021\001\255\255\255\255\255\255\025\001\255\255\
\255\255\255\255\029\001\030\001\001\001\002\001\003\001\034\001\
\005\001\006\001\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\255\255\255\255\255\255\
\021\001\255\255\255\255\255\255\025\001\255\255\255\255\255\255\
\029\001\030\001\031\001\255\255\255\255\034\001\001\001\002\001\
\003\001\255\255\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\255\255\
\255\255\020\001\021\001\255\255\255\255\255\255\025\001\255\255\
\255\255\255\255\029\001\030\001\001\001\002\001\003\001\034\001\
\005\001\006\001\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\255\255\255\255\255\255\
\021\001\255\255\023\001\255\255\025\001\255\255\255\255\255\255\
\029\001\030\001\001\001\002\001\003\001\034\001\005\001\006\001\
\007\001\008\001\009\001\010\001\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\255\255\255\255\255\255\021\001\255\255\
\255\255\255\255\025\001\255\255\255\255\255\255\029\001\030\001\
\031\001\255\255\255\255\034\001\001\001\002\001\003\001\255\255\
\005\001\006\001\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\255\255\255\255\255\255\
\021\001\255\255\255\255\255\255\025\001\255\255\255\255\255\255\
\029\001\030\001\031\001\255\255\255\255\034\001\001\001\002\001\
\003\001\255\255\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\255\255\
\255\255\255\255\021\001\255\255\023\001\255\255\025\001\255\255\
\255\255\255\255\029\001\030\001\001\001\002\001\003\001\034\001\
\005\001\006\001\007\001\008\001\009\001\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\255\255\255\255\255\255\
\021\001\255\255\255\255\255\255\025\001\255\255\255\255\255\255\
\029\001\030\001\001\001\002\001\003\001\034\001\005\001\006\001\
\007\001\008\001\009\001\010\001\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\255\255\255\255\255\255\021\001\255\255\
\255\255\255\255\025\001\255\255\255\255\255\255\029\001\030\001\
\001\001\002\001\003\001\034\001\005\001\006\001\007\001\008\001\
\009\001\010\001\011\001\012\001\013\001\014\001\015\001\016\001\
\017\001\255\255\255\255\255\255\021\001\255\255\255\255\255\255\
\025\001\255\255\255\255\255\255\255\255\030\001\001\001\002\001\
\003\001\034\001\005\001\006\001\007\001\008\001\009\001\010\001\
\011\001\012\001\013\001\014\001\015\001\016\001\017\001\255\255\
\255\255\255\255\021\001\000\001\001\001\002\001\003\001\004\001\
\005\001\255\255\007\001\030\001\255\255\255\255\255\255\034\001\
\255\255\255\255\255\255\255\255\255\255\018\001\255\255\255\255\
\021\001\022\001\255\255\255\255\255\255\026\001\255\255\255\255\
\255\255\030\001\255\255\032\001\033\001"

let yynames_const = "\
  NOT\000\
  MINUS\000\
  PLUS\000\
  MINUS_DOT\000\
  PLUS_DOT\000\
  AST\000\
  AST_DOT\000\
  SLASH_DOT\000\
  EQUAL\000\
  LESS_GREATER\000\
  LESS_EQUAL\000\
  GREATER_EQUAL\000\
  LESS\000\
  GREATER\000\
  IF\000\
  THEN\000\
  ELSE\000\
  LET\000\
  IN\000\
  REC\000\
  COMMA\000\
  ARRAY_CREATE\000\
  DOT\000\
  LESS_MINUS\000\
  SEMICOLON\000\
  LPAREN\000\
  RPAREN\000\
  EOF\000\
  FLOAT_OF_INT\000\
  FLOOR\000\
  SLASH\000\
  "

let yynames_block = "\
  BOOL\000\
  INT\000\
  FLOAT\000\
  IDENT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Syntax.t) in
    Obj.repr(
# 70 "parser.mly"
      ( _2 )
# 588 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    Obj.repr(
# 72 "parser.mly"
   ( Unit )
# 594 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 74 "parser.mly"
       ( Bool(_1) )
# 601 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 76 "parser.mly"
    ( Int(_1) )
# 608 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 78 "parser.mly"
        ( Float(_1) )
# 615 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 80 "parser.mly"
      ( Var(_1) )
# 622 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'simple_exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : Syntax.t) in
    Obj.repr(
# 82 "parser.mly"
         (
				let p = Parsing.rhs_start_pos 2 in
				  Info({ln = p.pos_lnum; cn=p.pos_cnum - p.pos_bol}, Get(_1, _4)) )
# 632 "parser.ml"
               : 'simple_exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 88 "parser.mly"
      ( _1 )
# 639 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 91 "parser.mly"
(
  let p = Parsing.rhs_start_pos 1 in
    Info({ln = p.pos_lnum; cn=p.pos_cnum - p.pos_bol}, Not(_2)) )
# 648 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 96 "parser.mly"
(
  let p = Parsing.rhs_start_pos 1 in
    Info({ln = p.pos_lnum; cn=p.pos_cnum - p.pos_bol}, match _2 with
	   | Float(f) -> Float(-.f) (* -1.23などは型エラーではないので別扱い *)
	   | e -> Neg(e)) )
# 659 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 102 "parser.mly"
    (
      let p = Parsing.rhs_start_pos 2 in
	Info({ln = p.pos_lnum; cn=p.pos_cnum - p.pos_bol}, Add(_1, _3)) )
# 669 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 106 "parser.mly"
 (
	  let p = Parsing.rhs_start_pos 2 in
	    Info({ln = p.pos_lnum; cn=p.pos_cnum - p.pos_bol}, Sub(_1, _3)) )
# 679 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 110 "parser.mly"
     (
	      let p = Parsing.rhs_start_pos 2 in
		Info({ln = p.pos_lnum; cn=0 }, Eq(_1, _3)) )
# 689 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 114 "parser.mly"
  (
		  let p = Parsing.rhs_start_pos 2 in
		    Info({ln = p.pos_lnum; cn=p.pos_cnum - p.pos_bol}, Not(Eq(_1, _3))) )
# 699 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 118 "parser.mly"
      (
		      let p = Parsing.rhs_start_pos 2 in
			Info({ln = p.pos_lnum; cn=p.pos_cnum - p.pos_bol}, Not(LE(_3, _1))) )
# 709 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 122 "parser.mly"
   (
			  let p = Parsing.rhs_start_pos 2 in
			    Info({ln = p.pos_lnum; cn=p.pos_cnum - p.pos_bol}, Not(LE(_1, _3))) )
# 719 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 126 "parser.mly"
       (
			      let p = Parsing.rhs_start_pos 2 in
				Info({ln = p.pos_lnum; cn=p.pos_cnum - p.pos_bol}, LE(_1, _3)) )
# 729 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 130 "parser.mly"
    (
				  let p = Parsing.rhs_start_pos 2 in
				    Info({ln = p.pos_lnum; cn=p.pos_cnum - p.pos_bol}, LE(_3, _1)) )
# 739 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Syntax.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 135 "parser.mly"
(
  let p = Parsing.rhs_start_pos 1 in
    Info({ln = p.pos_lnum; cn=p.pos_cnum - p.pos_bol}, If(_2, _4, _6)) )
# 750 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 140 "parser.mly"
(
  let p = Parsing.rhs_start_pos 1 in
    Info({ln = p.pos_lnum; cn=p.pos_cnum - p.pos_bol}, FNeg(_2)) )
# 759 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 144 "parser.mly"
    (
      let p = Parsing.rhs_start_pos 2 in
	Info({ln = p.pos_lnum; cn=p.pos_cnum - p.pos_bol}, FAdd(_1, _3)) )
# 769 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 148 "parser.mly"
 (
	  let p = Parsing.rhs_start_pos 2 in
	    Info({ln = p.pos_lnum; cn=p.pos_cnum - p.pos_bol}, FSub(_1, _3)) )
# 779 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 152 "parser.mly"
     (
	      let p = Parsing.rhs_start_pos 2 in
		Info({ln = p.pos_lnum; cn=p.pos_cnum - p.pos_bol}, Mul(_1, _3)) )
# 789 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 156 "parser.mly"
     (
	      let p = Parsing.rhs_start_pos 2 in
		Info({ln = p.pos_lnum; cn=p.pos_cnum - p.pos_bol}, Div(_1, _3)) )
# 799 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 160 "parser.mly"
     (
	      let p = Parsing.rhs_start_pos 2 in
		Info({ln = p.pos_lnum; cn=p.pos_cnum - p.pos_bol}, FMul(_1, _3)) )
# 809 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 164 "parser.mly"
  (
		  let p = Parsing.rhs_start_pos 2 in
		    Info({ln = p.pos_lnum; cn=p.pos_cnum - p.pos_bol}, FDiv(_1, _3)) )
# 819 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Id.t) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 169 "parser.mly"
( Let(addtyp _2, _4, _6) )
# 828 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'fundef) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 172 "parser.mly"
(
  let p = Parsing.rhs_start_pos 3 in
    Info({ln = p.pos_lnum; cn=p.pos_cnum - p.pos_bol }, LetRec(_3, _5)) )
# 838 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Syntax.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'actual_args) in
    Obj.repr(
# 177 "parser.mly"
(
  let p = Parsing.rhs_start_pos 1 in
    Info({ln = p.pos_lnum; cn=p.pos_cnum - p.pos_bol}, App(_1, _2)) )
# 848 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'elems) in
    Obj.repr(
# 181 "parser.mly"
    ( Tuple(_1) )
# 855 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : 'pat) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 183 "parser.mly"
 (
	  let p = Parsing.rhs_start_pos 1 in
	    Info({ln = p.pos_lnum; cn=p.pos_cnum - p.pos_bol}, LetTuple(_3, _6, _8)) )
# 866 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'simple_exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : Syntax.t) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 187 "parser.mly"
     (
	      let p = Parsing.rhs_start_pos 6 in
		Info({ln = p.pos_lnum; cn=p.pos_cnum - p.pos_bol}, Put(_1, _4, _7)) )
# 877 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Syntax.t) in
    Obj.repr(
# 191 "parser.mly"
  ( _1 )
# 884 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Syntax.t) in
    Obj.repr(
# 193 "parser.mly"
  ( Let((Id.gentmp Type.Unit, Type.Unit), _1, _3) )
# 892 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 195 "parser.mly"
      ( Let((Id.gentmp Type.Unit, Type.Unit), _1, _3) )
# 900 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'simple_exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 198 "parser.mly"
(
  let p = Parsing.rhs_start_pos 1 in
    Info({ln = p.pos_lnum; cn=p.pos_cnum - p.pos_bol}, Array(_2, _3)) )
# 910 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 203 "parser.mly"
(
  let p = Parsing.rhs_start_pos 1 in
    Info({ln = p.pos_lnum; cn=p.pos_cnum - p.pos_bol}, Float_of_int(_2)) )
# 919 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 208 "parser.mly"
(
  let p = Parsing.rhs_start_pos 1 in
    Info({ln = p.pos_lnum; cn=p.pos_cnum - p.pos_bol}, Floor(_2)) )
# 928 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    Obj.repr(
# 212 "parser.mly"
    (
      failwith
	(Printf.sprintf "parse error near lines %d, characters %d"
	   !line_num
	   (Parsing.symbol_start () - !char_num + 2) )
    )
# 939 "parser.ml"
               : Syntax.t))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Id.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'formal_args) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 221 "parser.mly"
 ( { name = addtyp _1; args = _2; body = _4 } )
# 948 "parser.ml"
               : 'fundef))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Id.t) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'formal_args) in
    Obj.repr(
# 225 "parser.mly"
     ( addtyp _1 :: _2 )
# 956 "parser.ml"
               : 'formal_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 227 "parser.mly"
  ( [addtyp _1] )
# 963 "parser.ml"
               : 'formal_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'actual_args) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 232 "parser.mly"
( _1 @ [_2] )
# 971 "parser.ml"
               : 'actual_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'simple_exp) in
    Obj.repr(
# 235 "parser.mly"
( [_1] )
# 978 "parser.ml"
               : 'actual_args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'elems) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 239 "parser.mly"
    ( _1 @ [_3] )
# 986 "parser.ml"
               : 'elems))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Syntax.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Syntax.t) in
    Obj.repr(
# 241 "parser.mly"
 ( [_1; _3] )
# 994 "parser.ml"
               : 'elems))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pat) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 245 "parser.mly"
     ( _1 @ [addtyp _3] )
# 1002 "parser.ml"
               : 'pat))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Id.t) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Id.t) in
    Obj.repr(
# 247 "parser.mly"
  ( [addtyp _1; addtyp _3] )
# 1010 "parser.ml"
               : 'pat))
(* Entry exp *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let exp (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Syntax.t)
